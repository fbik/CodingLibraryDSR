@using Web.Pages.Problems.Models
@inherits MudComponentBase

@inject IProblemsService ProblemsService

<MudDialog>
    <DialogContent>
        <MudForm Model="model" @ref="form" Validation="@(modelValidator.ValidateValue)">
            <MudGrid>
                <MudItem xs="12" sm="6">
                    <MudTextField Label="Description" @bind-Value="model.Description"
                                  For="@(() => model.Description)"
                                  Required="true"
                                  RequiredError="Description is required!"
                    >
                    </MudTextField>
                </MudItem>
                <MudItem xs="12" sm="6">
                    <MudSelect @ref="selectCategories" T="int" Label="Categories" @bind-Value="model.CategoriesId"
                               For="@(() => model.CategoriesId)">
                        <MudSelectItem T=int Value="0">&nbsp;</MudSelectItem>
                        @foreach (var categoties in _categories)
                        {
                            <MudSelectItem T="string" Value="@categoties.Title">@categoties.Title</MudSelectItem>
                        }
                    </MudSelect>
                </MudItem>
                <MudItem xs="12" >
                    <MudTextField Label="Description"
                                  Lines="5"
                                  For="@(() => model.Description)"
                                  @bind-Value="model.Description"></MudTextField>
                </MudItem>
            </MudGrid>
        </MudForm>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="MudBlazor.Color.Primary" OnClick="Submit">Ok</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter]
    MudDialogInstance MudDialog { get; set; } = default!;

    MudForm form = default!;
    MudSelect<int> selectCategories = default!;

    ProblemsModelValidator modelValidator = new ProblemsModelValidator();

    bool isNew = false;

    [Parameter]
    public int? ProblemsId { get; set; } = default;

    [Parameter]
    public ProblemsModel model { get; set; } = new() { CategoriesId = 0 };

    private List<CategoriesModel> _categories { get; set; } = new List<CategoriesModel>();

    protected override async Task OnInitializedAsync()
    {
        var data = await ProblemsService.GetCategoriesList();
        _categories.AddRange(data);

        isNew = ProblemsId == null;
        if (!isNew)
        {
            var problems = await ProblemsService.GetProblems(ProblemsId ?? 0);

            model.Uid = problems.Uid;
            model.Id = problems.Id;
            model.Id = problems.CategoriesId;
            model.Uid = problems.LanguagesId;
            model.Description = problems.Description;
            model.Solution = problems.Solution;
            
        }

        await selectCategories.SelectOption(model.CategoriesId);
        form.ResetValidation();
    }

    async Task Submit()
    {
        await form.Validate();
        if (form.IsValid)
        {
            MudDialog.Close(DialogResult.Ok(true));
        }
    }

    void Cancel() => MudDialog.Cancel();
}
